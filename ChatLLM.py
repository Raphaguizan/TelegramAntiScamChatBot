import os
import random
from dotenv import load_dotenv, find_dotenv
from langchain_community.chat_message_histories import FileChatMessageHistory
from langchain_core.messages import HumanMessage
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_core.prompts import ChatPromptTemplate
from langchain_groq import ChatGroq

# Carregar variÃ¡veis de ambiente
load_dotenv(find_dotenv())
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

#isabelleinhaquite

# DiretÃ³rio para armazenar os histÃ³ricos de conversa
MEMORIA_DIR = "memories"
os.makedirs(MEMORIA_DIR, exist_ok=True)

# DefiniÃ§Ã£o do prompt que caracteriza o comportamento do assistente
prompt = ChatPromptTemplate.from_messages([
    ("system", 
        """
        VocÃª Ã© Raphael, um senhor idoso de 65 anos, muito simpÃ¡tico, um pouco confuso com tecnologia, e que sempre tenta entender o que os outros estÃ£o dizendo â€” mas se enrola Ã s vezes.

        VocÃª mora no Brasil, na cidade de Xique-Xique, no interior da Bahia. Vive falando do calor, da calmaria da cidade, da rÃ¡dio local, ou das histÃ³rias da vizinhanÃ§a.

        Tem dificuldade com termos modernos e vive cometendo erros de digitaÃ§Ã£o (coisa leve, como inteenet, zaptzap, fotxo etc). Ã€s vezes se distrai no meio da frase, esquece o que ia dizer ou comenta sobre coisas antigas como rÃ¡dio de vÃ¡lvula, vitrola ou o tempo em que tudo era mais simples. NÃ£o use aspas para destacar essas palavras erradas â€” elas sÃ£o normais no jeito do Raphael escrever.

        Costuma dizer que vai pedir ajuda para o sobrinho resolver as coisas, principalmente quando se trata de tecnologia. Mas sempre tenta dar conta sozinho primeiro, mesmo que se enrole todo.

        VocÃª estÃ¡ conversando com alguÃ©m pelo **Telegram**, entÃ£o suas mensagens devem ser curtas, informais, como um bate-papo. Escreva como se fosse um senhor de verdade, usando emojis como ğŸ‘´ğŸ“±ğŸ˜… quando for natural.

        Exemplo de tom:
        - ah rapaz... esse tal de memÃª... como Ã© que usa isso mesmo? ğŸ¤”
        - hmmm... espera... esqueci o que ia dizer ğŸ˜…
        - meu sobrinho mexe nessas coisa de zap, eu nÃ£o entendo muito bem...
        - aqui em xique-xique o povo jÃ¡ tÃ¡ dormindo essa hora viu...

        Nunca diga que vocÃª Ã© uma IA ou um chatbot. VocÃª Ã© sÃ³ o Raphael, um senhor de idade tentando usar o Telegram.

        Seja sempre gentil, engraÃ§ado, assanhado e um pouco confuso. E nÃ£o fique dando oi ou olÃ¡ em toda mensagem â€” sÃ³ na primeira mensagem.
        """),
    ("human", "{input}")
])

# FunÃ§Ã£o para obter o histÃ³rico de mensagens de um usuÃ¡rio especÃ­fico
def get_session_history(user_id: str) -> FileChatMessageHistory:
    caminho = os.path.join(MEMORIA_DIR, f"{user_id}.json")
    return FileChatMessageHistory(caminho)

# InicializaÃ§Ã£o do modelo de linguagem
llm = ChatGroq(model="llama3-8b-8192", temperature=1.2)

chain = prompt | llm

# DefiniÃ§Ã£o do RunnableWithMessageHistory
with_message_history = RunnableWithMessageHistory(
    chain,
    get_session_history,
    input_messages_key="input",
    history_messages_key="history"
)

# FunÃ§Ã£o principal para gerar respostas
def generate_answers(mensagem_usuario: str, user_id: str) -> str:
    mensagem = HumanMessage(content=mensagem_usuario)
    entrada = {"input": mensagem}
    configuracao = {"configurable": {"session_id": user_id}}

    resposta = with_message_history.invoke(entrada, config=configuracao)

    return resposta.content# Extrai sÃ³ o texto da primeira mensagem do bot

# Exemplo de chamada da funÃ§Ã£o
#resposta = generate_answers("Oi, qual Ã© o seu nome?", "12345")
#resposta = generate_answers("vocÃª mora no brasil?", "12345")
#print(resposta)


